import subprocess
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QLineEdit, QListWidget,QListWidgetItem, QPushButton, QHBoxLayout, QGridLayout, QProgressBar
from PyQt5.QtCore import pyqtSlot, QTimer, Qt, QThread, QObject, pyqtSignal
import warnings
from queue import Queue
from pywinauto import Application
from pywinauto.keyboard import send_keys
from add_user import AddUser
from qt_material import apply_stylesheet
from time import sleep
import json

warnings.simplefilter("ignore", UserWarning)


class WhatsApp(QObject): # Inherit from QObject to use signals
    finished = pyqtSignal()
    progress_updated = pyqtSignal(int)  # Signal for overall progress
    timer_progress_updated = pyqtSignal(int)  # Signal for timer progress

    def __init__(self):
        super().__init__()
        self.aborted = False
        self.abort_requested = False 

    def precheck_events(self):
        print("Precheck events...")
        #self.click_call_button()
        #self.start_recording()
        self.lock_screen()

    def postcheck_events(self):
        print("Postcheck events...")
        self.lock_screen()
        self.click_end_button()
        self.unlock_screen()
        self.stop_recording()
        self.lock_screen()
    
    def abort(self):
        print("Aborting...")
        self.aborted = True
        self.abort_requested = True  # Set the flag when abort is requested


    def click_call_button(self):
        print("Clicking call button...")
        while not self.aborted:
            try:
                self.appwhatsapp.WhatsAppDialog.child_window(title="Video call", auto_id="VideoCallButton", control_type="Button").click()
                break
            except:
                sleep(1)
                continue
    

    def run_whatsapp_process(self, contacts, timers):
        print("Running WhatsApp process...")
        for contact, timer_input in zip(contacts, timers):
            if self.abort_requested:  # Check if abort is requested
                break  # Exit the loop if abort is requested
            self.grab_contact(contact)
            self.precheck_events()
            # Start the timer
            self.start_timer(float(timer_input))
            # Pause the execution until the timer completes
            while self.timer_running:
                sleep(1)  # You can adjust the sleep duration as needed
            self.postcheck_events()
        self.finished.emit()

    def start_timer(self, seconds):
        print("Starting timer...")
        self.timer_running = True
        QTimer.singleShot(seconds * 1000, self.timer_complete)

    def timer_complete(self):
        print("Timer completed.")
        self.timer_running = False


    def start_recording(self):
        print("Starting recording...")
        self.dialog = self.appwhatsapp.window(title="Video call â€Ž- WhatsApp")
        sleep(2)
        self.dialog.maximize()
        self.button = self.dialog.child_window(title="Add members", auto_id="ParticipantSideBarTriggerButton", control_type="Button")
        self.panel = self.dialog.child_window(title="Device settings", auto_id="MoreButton", control_type="Button").wait('visible', timeout=30, retry_interval=0.5)
        self.panel.set_focus()
        while not self.aborted:
            send_keys("{TAB}")
            try:
                if self.button.is_enabled():
                    send_keys("{VK_F12}")
                    break
            except:
                sleep(3)
                continue

    def stop_recording(self):
        print("Stopping recording...")
        sleep(1)
        if not self.click_end_button():  # Check if the call was successfully ended
            print("Call could not be ended, attempting emergency shutdown...")
            try:
                subprocess.call("TASKKILL /F /IM WhatsApp.exe", shell=True)
                print("WhatsApp process terminated successfully.")
                sleep(1)
                send_keys("{VK_F12}")
            except Exception as e:
                print("Error:", e)
        else:
            print("Call ended successfully.")
        sleep(1)

    def lock_screen(self):
        sleep(1)
        send_keys("^%{VK_NUMPAD0}")

    def unlock_screen(self):
        sleep(1)
        send_keys("^%{VK_NUMPAD0}")

    def click_end_button(self):
        try:
            sleep(2)
            button = self.appwhatsapp.Dialog.child_window(title="End call", auto_id="EndCallButton", control_type="Button")
            if button.exists():  # Check if the button exists before attempting to click it
                button.set_focus()
                button.click()
                sleep(0.5)
                button.click()
                send_keys("{VK_F12}")
                return True  # Return True if the button was clicked successfully
        except Exception as e:
            print("ERROR:", e)
        return False  # Return False if the button could not be clicked
    
    
    def grab_contact(self,number):
        print(f"Grabbing contact...{number}")
        sleep(3)
        self.startapp = Application(backend='uia').start(r"cmd.exe /c start shell:appsFolder\5319275A.WhatsAppDesktop_cv1g1gvanyjgm!App", create_new_console=True, wait_for_idle=False)
        sleep(2)
        self.appwhatsapp = Application(backend='uia').connect(title_re="WhatsApp", timeout=10)
        sleep(0.25)
        self.url = f"whatsapp://send?phone=+91{number}"
        self.subwhatsapp = subprocess.Popen(["cmd", "/C", f"start {self.url}"], shell=True)
        sleep(0.25)
        self.url = f"whatsapp://send?phone=+91{number}"
        self.subwhatsapp = subprocess.Popen(["cmd", "/C", f"start {self.url}"], shell=True)

class PhonePortal(QMainWindow):


    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setWindowTitle("Phone Portal Connect V5")
        self.setGeometry(100, 100, 600, 300)

        self.user_id_input = QLineEdit(self)
        self.user_id_input.setPlaceholderText("Enter User ID")
        self.search_button = QPushButton("Search", self)
        self.result_label = QLabel(self)
        self.result_text_browser = QListWidget(self)  #QTextBrowser(self)
        self.result_text_browser.itemDoubleClicked.connect(self.add_contact_from_result)
        self.contact_text_browser = QListWidget(self)   #QTextBrowser(self)
        self.add_button = QPushButton("Add Contact", self)
        self.btn_add_user = QPushButton('Add User', self)
        self.remove_button = QPushButton("Remove Contact", self)
        self.connect_button = QPushButton("Connect", self)
        self.swap_button = QPushButton("Swap", self)
        self.abort_button = QPushButton("Abort", self)
        self.reset_button = QPushButton("Reset", self)
        self.timer1_input = QLineEdit(self)
        self.timer2_input = QLineEdit(self)
        self.timer3_input = QLineEdit(self)
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setStyleSheet("QProgressBar { height: 20px; width: 200px; }")
        self.timer_progress_bar = QProgressBar(self)  # Create new progress bar
        self.timer_progress_bar.setStyleSheet("QProgressBar { height: 20px; width: 200px; }")
        self.timer_progress_bar.setValue(0)  # Set initial value
        self.progress_bar.setValue(0)
        self.timer1_input.setPlaceholderText("Timer 1")
        self.timer2_input.setPlaceholderText("Timer 2")
        self.timer3_input.setPlaceholderText("Timer 3")
        self.timer1_input.setMaxLength(3)
        self.timer2_input.setMaxLength(3)
        self.timer3_input.setMaxLength(3)
        self.timer1_input.setEnabled(False)
        self.timer2_input.setEnabled(False)
        self.timer3_input.setEnabled(False)

        layout = QHBoxLayout()
        grid_layout = QGridLayout()
        grid_layout.addWidget(self.user_id_input, 0, 0, 1, 1)
        grid_layout.addWidget(self.swap_button, 6, 1)
        grid_layout.addWidget(self.btn_add_user,0,2)
        grid_layout.addWidget(self.search_button, 0, 1)
        grid_layout.addWidget(self.result_label, 1, 0, 1, 3)
        grid_layout.addWidget(self.result_text_browser, 2, 0, 1, 3)
        grid_layout.addWidget(self.contact_text_browser, 3, 0, 1, 3)
        grid_layout.addWidget(self.add_button, 5, 0)
        grid_layout.addWidget(self.remove_button, 5, 1)
        grid_layout.addWidget(self.reset_button, 5, 2)
        grid_layout.addWidget(self.connect_button, 6, 0)
        grid_layout.addWidget(self.abort_button, 6, 2)
        grid_layout.addWidget(self.timer1_input, 4, 0)
        grid_layout.addWidget(self.timer2_input, 4, 1)
        grid_layout.addWidget(self.timer3_input, 4, 2)
        grid_layout.addWidget(self.progress_bar, 7, 0,1,3)
        grid_layout.addWidget(self.timer_progress_bar,8,0,1,3)
        layout.addLayout(grid_layout)

        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

        self.search_button.clicked.connect(self.search_user)
        self.add_button.clicked.connect(self.add_contact)
        self.remove_button.clicked.connect(self.remove_contact)
        self.connect_button.clicked.connect(self.start_process)
        self.swap_button.clicked.connect(self.swap_contacts)
        self.reset_button.clicked.connect(self.reset_function)
        self.btn_add_user.clicked.connect(self.addUser)

        self.selected_contacts = []
        self.worker_thread = QThread()
        self.worker = WhatsApp()
        self.worker.moveToThread(self.worker_thread)
        self.worker_thread.started.connect(self.worker.run_whatsapp_process)
        self.worker.progress_updated.connect(self.progress_bar.setValue)
        self.worker.timer_progress_updated.connect(self.timer_progress_bar.setValue)
        self.worker.finished.connect(self.worker_thread.quit)
        self.worker_thread.finished.connect(self.worker.deleteLater)

        # Now you can connect the signal
        self.abort_button.clicked.connect(self.worker.abort)
    
    def addUser(self):
        # This is the slot function for the "Add User" button
        self.ex = AddUser()
        apply_stylesheet(self.ex, theme='dark_blue.xml')
        self.ex.show()
    
    def search_user(self):
        with open("user_data.json", "r") as json_file:
            self.user_data = json.load(json_file)
        user_id = self.user_id_input.text()
        if user_id in self.user_data:
            user_info = self.user_data[user_id]
            name = user_info.get("name", "")
            contacts = [user_info.get("1", ""), user_info.get("2", ""), user_info.get("3", "")]
            self.result_label.setText(f"Name: {name}")
            self.result_text_browser.clear()
            for contact in contacts:
                if contact:
                    self.result_text_browser.addItem(contact)  # Use addItem instead of append
        else:
            self.result_label.setText("User not found.")
            self.result_text_browser.clear()

    def add_contact(self):
        selected_contact = self.result_text_browser.currentItem().text()
        if selected_contact:
            self.selected_contacts.append(selected_contact)
            self.update_contact_text_browser()

            if len(self.selected_contacts) == 1:
                self.timer1_input.setEnabled(True)
            elif len(self.selected_contacts) == 2:
                self.timer2_input.setEnabled(True)
            elif len(self.selected_contacts) == 3:
                self.timer3_input.setEnabled(True)
        
    def add_contact_from_result(self, item):
        # Get the text of the double-clicked item
        contact = item.text()
        
        # Add the contact to the contact text browser
        self.selected_contacts.append(contact)
        self.update_contact_text_browser()
        
        # Enable timer inputs as needed
        if len(self.selected_contacts) == 1:
            self.timer1_input.setEnabled(True)
        elif len(self.selected_contacts) == 2:
            self.timer2_input.setEnabled(True)
        elif len(self.selected_contacts) == 3:
            self.timer3_input.setEnabled(True)

    def remove_contact(self):
        selected_contact = self.contact_text_browser.selectedItems()
        if selected_contact:
            for item in selected_contact:
                row = self.contact_text_browser.row(item)
                self.contact_text_browser.takeItem(row)
                del self.selected_contacts[row]

            # Update the input fields
            if len(self.selected_contacts) < 1:
                self.timer1_input.setEnabled(False)
            if len(self.selected_contacts) < 2:
                self.timer2_input.setEnabled(False)
            if len(self.selected_contacts) < 3:
                self.timer3_input.setEnabled(False)


    def swap_contacts(self):
        if len(self.selected_contacts) >= 2:
            self.selected_contacts[0], self.selected_contacts[1] = self.selected_contacts[1], self.selected_contacts[0]
            self.timer1_input.text, self.timer2_input.text = self.timer2_input.text, self.timer1_input.text
            self.update_contact_text_browser()
        elif len(self.selected_contacts) >= 3:
            self.selected_contacts[0], self.selected_contacts[1], self.selected_contacts[2] = self.selected_contacts[2], self.selected_contacts[1], self.selected_contacts[0]
            self.update_contact_text_browser()

    def update_contact_text_browser(self):
        self.contact_text_browser.clear()
        for contact in self.selected_contacts:
            item = QListWidgetItem(contact)
            self.contact_text_browser.addItem(item)


    def reset_function(self):
        self.user_id_input.clear()
        self.result_label.clear()
        self.result_text_browser.clear()
        self.contact_text_browser.clear()
        self.selected_contacts.clear()
        self.timer1_input.clear()
        self.timer2_input.clear()
        self.timer3_input.clear()
        self.timer1_input.setEnabled(False)
        self.timer2_input.setEnabled(False)
        self.timer3_input.setEnabled(False)
        self.progress_bar.setValue(0)
        self.timer_progress_bar.setValue(0)
        self.connect_button.setEnabled(True)



    def start_process(self):
        self.connect_button.setEnabled(False)
        # Fetch the contacts from the class attribute
        contacts = self.selected_contacts
        timer1 = self.timer1_input.text()
        timer2 = self.timer2_input.text()   
        timer3 = self.timer3_input.text()
        timers = [timer1, timer2, timer3]
        # Pass both contacts and timers to the worker thread
        self.worker.run_whatsapp_process(contacts, timers)
        # Start the worker thread after passing the arguments
        self.worker_thread.start()


        



if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = PhonePortal()
    window.show()
    sys.exit(app.exec())


